<?php



namespace {

	/**
	 * <p>Represents ZooKeeper session.</p>
	 * @link https://php.net/manual/ja/class.zookeeper.php
	 * @since PECL zookeeper >= 0.1.0
	 */
	class Zookeeper {

		/**
		 * @var integer <p>Can read nodes value and list its children</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_READ = 1;

		/**
		 * @var integer <p>Can set the nodes value</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_WRITE = 2;

		/**
		 * @var integer <p>Can create children</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_CREATE = 4;

		/**
		 * @var integer <p>Can delete children</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_DELETE = 8;

		/**
		 * @var integer <p>Can execute set_acl()</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_ADMIN = 16;

		/**
		 * @var integer <p>All of the above flags ORd together</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const PERM_ALL = 31;

		/**
		 * @var integer <p>If Zookeeper::EPHEMERAL flag is set, the node will automatically get removed if the client session goes away.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const EPHEMERAL = 1;

		/**
		 * @var integer <p>If the Zookeeper::SEQUENCE flag is set, a unique monotonically increasing sequence number is appended to the path name. The sequence number is always fixed length of 10 digits, 0 padded.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const SEQUENCE = 2;

		/**
		 * @var integer <p>Outputs only error mesages</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const LOG_LEVEL_ERROR = 1;

		/**
		 * @var integer <p>Outputs errors/warnings</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const LOG_LEVEL_WARN = 2;

		/**
		 * @var integer <p>Outputs big action messages besides errors/warnings</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const LOG_LEVEL_INFO = 3;

		/**
		 * @var integer <p>Outputs all</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const LOG_LEVEL_DEBUG = 4;

		/**
		 * @var integer <p>Connected but session expired</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const EXPIRED_SESSION_STATE = -112;

		/**
		 * @var integer <p>Connected but auth failed</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const AUTH_FAILED_STATE = -113;

		/**
		 * @var integer <p>Connecting</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CONNECTING_STATE = 1;

		/**
		 * @var integer <p>Associating</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const ASSOCIATING_STATE = 2;

		/**
		 * @var integer <p>Connected</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CONNECTED_STATE = 3;

		/**
		 * @var integer <p>TODO: help us improve this extension.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const READONLY_STATE = 5;

		/**
		 * @var integer <p>Connection failed</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOTCONNECTED_STATE = 999;

		/**
		 * @var integer <p>A node has been created</p> <p>This is only generated by watches on non-existent nodes. These watches are set using Zookeeper::exists.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CREATED_EVENT = 1;

		/**
		 * @var integer <p>A node has been deleted</p> <p>This is only generated by watches on nodes. These watches are set using Zookeeper::exists and Zookeeper::get.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const DELETED_EVENT = 2;

		/**
		 * @var integer <p>A node has changed</p> <p>This is only generated by watches on nodes. These watches are set using Zookeeper::exists and Zookeeper::get.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CHANGED_EVENT = 3;

		/**
		 * @var integer <p>A change as occurred in the list of children</p> <p>This is only generated by watches on the child list of a node. These watches are set using Zookeeper::getChildren.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CHILD_EVENT = 4;

		/**
		 * @var integer <p>A session has been lost</p> <p>This is generated when a client loses contact or reconnects with a server.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const SESSION_EVENT = -1;

		/**
		 * @var integer <p>A watch has been removed</p> <p>This is generated when the server for some reason, probably a resource constraint, will no longer watch a node for a client.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOTWATCHING_EVENT = -2;

		/**
		 * @var integer <p>This is never thrown by the server, it shouldn't be used other than to indicate a range. Specifically error codes greater than this value, but lesser than Zookeeper::APIERROR, are system errors.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const SYSTEMERROR = -1;

		/**
		 * @var integer <p>A runtime inconsistency was found.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const RUNTIMEINCONSISTENCY = -2;

		/**
		 * @var integer <p>A data inconsistency was found.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const DATAINCONSISTENCY = -3;

		/**
		 * @var integer <p>Connection to the server has been lost.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CONNECTIONLOSS = -4;

		/**
		 * @var integer <p>Error while marshalling or unmarshalling data.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const MARSHALLINGERROR = -5;

		/**
		 * @var integer <p>Operation is unimplemented.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const UNIMPLEMENTED = -6;

		/**
		 * @var integer <p>Operation timeout.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const OPERATIONTIMEOUT = -7;

		/**
		 * @var integer <p>Invalid arguments.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const BADARGUMENTS = -8;

		/**
		 * @var integer <p>Invliad zhandle state.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const INVALIDSTATE = -9;

		/**
		 * @var integer <p>No quorum of new config is connected and up-to-date with the leader of last committed config - try invoking reconfiguration after new servers are connected and synced.</p> <p>Available as of ZooKeeper 3.5.0</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NEWCONFIGNOQUORUM = -13;

		/**
		 * @var integer <p>Reconfiguration requested while another reconfiguration is currently in progress. This is currently not supported. Please retry.</p> <p>Available as of ZooKeeper 3.5.0</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const RECONFIGINPROGRESS = -14;

		/**
		 * @var integer <p>Everything is OK.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const OK = 0;

		/**
		 * @var integer <p>This is never thrown by the server, it shouldn't be used other than to indicate a range. Specifically error codes greater than this value are API errors (while values less than this indicate a Zookeeper::SYSTEMERROR).</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const APIERROR = -100;

		/**
		 * @var integer <p>Node does not exist.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NONODE = -101;

		/**
		 * @var integer <p>Not authenticated.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOAUTH = -102;

		/**
		 * @var integer <p>Version conflict.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const BADVERSION = -103;

		/**
		 * @var integer <p>Ephemeral nodes may not have children.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOCHILDRENFOREPHEMERALS = -108;

		/**
		 * @var integer <p>The node already exists.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NODEEXISTS = -110;

		/**
		 * @var integer <p>The node has children.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOTEMPTY = -111;

		/**
		 * @var integer <p>The session has been expired by the server.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const SESSIONEXPIRED = -112;

		/**
		 * @var integer <p>Invalid callback specified.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const INVALIDCALLBACK = -113;

		/**
		 * @var integer <p>Invalid ACL specified.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const INVALIDACL = -114;

		/**
		 * @var integer <p>Client authentication failed.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const AUTHFAILED = -115;

		/**
		 * @var integer <p>ZooKeeper is closing.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const CLOSING = -116;

		/**
		 * @var integer <p>(not error) No server responses to process.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOTHING = -117;

		/**
		 * @var integer <p>Session moved to another server, so operation is ignored.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const SESSIONMOVED = -118;

		/**
		 * @var integer <p>State-changing request is passed to read-only server.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOTREADONLY = -119;

		/**
		 * @var integer <p>Attempt to create ephemeral node on a local session.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const EPHEMERALONLOCALSESSION = -120;

		/**
		 * @var integer <p>The watcher couldn't be found.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const NOWATCHER = -121;

		/**
		 * @var integer <p>Attempts to perform a reconfiguration operation when reconfiguration feature is disabled.</p>
		 * @link https://php.net/manual/ja/class.zookeeper.php
		 */
		const RECONFIGDISABLED = -122;

		/**
		 * Create a handle to used communicate with zookeeper
		 * <p>This method creates a new handle and a zookeeper session that corresponds to that handle. Session establishment is asynchronous, meaning that the session should not be considered established until (and unless) an event of state ZOO_CONNECTED_STATE is received.</p>
		 * @param string $host <p>comma separated host:port pairs, each corresponding to a zk server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002"</p>
		 * @param callable $watcher_cb <p>the global watcher callback function. When notifications are triggered this function will be invoked.</p>
		 * @param int $recv_timeout <p>the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE).</p>
		 * @return self
		 * @link https://php.net/manual/ja/zookeeper.construct.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function __construct(string $host = '', callable $watcher_cb = NULL, int $recv_timeout = 10000) {}

		/**
		 * Specify application credentials
		 * <p>The application calls this function to specify its credentials for purposes of authentication. The server will use the security provider specified by the scheme parameter to authenticate the client connection. If the authentication request has failed: - the server connection is dropped. - the watcher is called with the ZOO_AUTH_FAILED_STATE value as the state parameter.</p>
		 * @param string $scheme <p>The id of authentication scheme. Natively supported: "digest" password-based authentication</p>
		 * @param string $cert <p>Application credentials. The actual value depends on the scheme.</p>
		 * @param callable $completion_cb <p>The routine to invoke when the request completes. One of the following result codes may be passed into the completion callback: - ZOK operation completed successfully - ZAUTHFAILED authentication failed</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.addauth.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function addAuth(string $scheme, string $cert, callable $completion_cb = NULL): bool {}

		/**
		 * Close the zookeeper handle and free up any resources
		 * @return void
		 * @link https://php.net/manual/ja/zookeeper.close.php
		 * @since PECL zookeeper >= 0.5.0
		 */
		public function close(): void {}

		/**
		 * Create a handle to used communicate with zookeeper
		 * <p>This method creates a new handle and a zookeeper session that corresponds to that handle. Session establishment is asynchronous, meaning that the session should not be considered established until (and unless) an event of state ZOO_CONNECTED_STATE is received.</p>
		 * @param string $host <p>Comma separated host:port pairs, each corresponding to a zk server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002"</p>
		 * @param callable $watcher_cb <p>The global watcher callback function. When notifications are triggered this function will be invoked.</p>
		 * @param int $recv_timeout <p>The timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE).</p>
		 * @return void
		 * @link https://php.net/manual/ja/zookeeper.connect.php
		 * @since PECL zookeeper >= 0.2.0
		 */
		public function connect(string $host, callable $watcher_cb = NULL, int $recv_timeout = 10000): void {}

		/**
		 * Create a node synchronously
		 * <p>This method will create a node in ZooKeeper. A node can only be created if it does not already exists. The Create Flags affect the creation of nodes. If ZOO_EPHEMERAL flag is set, the node will automatically get removed if the client session goes away. If the ZOO_SEQUENCE flag is set, a unique monotonically increasing sequence number is appended to the path name.</p>
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param string $value <p>The data to be stored in the node.</p>
		 * @param array $acls <p>The initial ACL of the node. The ACL must not be null or empty.</p>
		 * @param int $flags <p>this parameter can be set to 0 for normal create or an OR of the Create Flags</p>
		 * @return string <p>Returns the path of the new node (this might be different than the supplied path because of the ZOO_SEQUENCE flag) on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.create.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function create(string $path, string $value, array $acls, int $flags = NULL): string {}

		/**
		 * Delete a node in zookeeper synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param int $version <p>The expected version of the node. The function will fail if the actual version of the node does not match the expected version. If -1 is used the version check will not take place.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.delete.php
		 * @since PECL zookeeper >= 0.2.0
		 */
		public function delete(string $path, int $version = -1): bool {}

		/**
		 * Checks the existence of a node in zookeeper synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param callable $watcher_cb <p>if nonzero, a watch will be set at the server to notify the client if the node changes. The watch will be set even if the node does not</p>
		 * @return array <p>Returns the value of stat for the path if the given node exists, otherwise false.</p>
		 * @link https://php.net/manual/ja/zookeeper.exists.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function exists(string $path, callable $watcher_cb = NULL): array {}

		/**
		 * Gets the data associated with a node synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param callable $watcher_cb <p>If nonzero, a watch will be set at the server to notify the client if the node changes.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @param int $max_size <p>Max size of the data. If 0 is used, this method will return the whole data.</p>
		 * @return string <p>Returns the data on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.get.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function get(string $path, callable $watcher_cb = NULL, array &$stat = NULL, int $max_size = 0): string {}

		/**
		 * Gets the acl associated with a node synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @return array <p>Return acl array on success and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.getacl.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function getAcl(string $path): array {}

		/**
		 * Lists the children of a node synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param callable $watcher_cb <p>If nonzero, a watch will be set at the server to notify the client if the node changes.</p>
		 * @return array <p>Returns an array with children paths on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.getchildren.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function getChildren(string $path, callable $watcher_cb = NULL): array {}

		/**
		 * Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)
		 * @return int <p>Returns the client session id on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.getclientid.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function getClientId(): int {}

		/**
		 * Get instance of ZookeeperConfig
		 * @return ZookeeperConfig <p>Returns instance of ZookeeperConfig.</p>
		 * @link https://php.net/manual/ja/zookeeper.getconfig.php
		 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
		 */
		public function getConfig(): \ZookeeperConfig {}

		/**
		 * Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect
		 * @return int <p>Returns the timeout for this session on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.getrecvtimeout.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function getRecvTimeout(): int {}

		/**
		 * Get the state of the zookeeper connection
		 * @return int <p>Returns the state of zookeeper connection on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.getstate.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function getState(): int {}

		/**
		 * Checks if the current zookeeper connection state can be recovered
		 * <p>The application must close the handle and try to reconnect.</p>
		 * @return bool <p>Returns true/false on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeper.isrecoverable.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function isRecoverable(): bool {}

		/**
		 * Sets the data associated with a node
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param string $value <p>The data to be stored in the node.</p>
		 * @param int $version <p>The expected version of the node. The function will fail if the actual version of the node does not match the expected version. If -1 is used the version check will not take place.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.set.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function set(string $path, string $value, int $version = -1, array &$stat = NULL): bool {}

		/**
		 * Sets the acl associated with a node synchronously
		 * @param string $path <p>The name of the node. Expressed as a file name with slashes separating ancestors of the node.</p>
		 * @param int $version <p>The expected version of the path.</p>
		 * @param array $acl <p>The acl to be set on the path.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.setacl.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function setAcl(string $path, int $version, array $acl): bool {}

		/**
		 * Sets the debugging level for the library
		 * @param int $logLevel <p>ZooKeeper log level constants.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.setdebuglevel.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public static function setDebugLevel(int $logLevel): bool {}

		/**
		 * Enable/disable quorum endpoint order randomization
		 * <p>If passed a true value, will make the client connect to quorum peers in the order as specified in the zookeeper_init() call. A false value causes zookeeper_init() to permute the peer endpoints which is good for more even client connection distribution among the quorum peers. ZooKeeper C Client uses false by default.</p>
		 * @param bool $yesOrNo <p>Disable/enable quorum endpoint order randomization.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.setdeterministicconnorder.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public static function setDeterministicConnOrder(bool $yesOrNo): bool {}

		/**
		 * Sets the stream to be used by the library for logging
		 * <p>The zookeeper library uses stderr as its default log stream. Application must make sure the stream is writable. Passing in NULL resets the stream to its default value (stderr).</p>
		 * @param resource $stream <p>The stream to be used by the library for logging.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.setlogstream.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function setLogStream($stream): bool {}

		/**
		 * Set a watcher function
		 * @param callable $watcher_cb <p>A watch will be set at the server to notify the client if the node changes.</p>
		 * @return bool <p>成功した場合に <b><code>TRUE</code></b> を、失敗した場合に <b><code>FALSE</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/zookeeper.setwatcher.php
		 * @since PECL zookeeper >= 0.1.0
		 */
		public function setWatcher(callable $watcher_cb): bool {}
	}

	/**
	 * <p>The ZooKeeper authentication exception handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeeperauthenticationexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperAuthenticationException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper Config handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeeperconfig.php
	 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
	 */
	class ZookeeperConfig {

		/**
		 * Add servers to the ensemble
		 * @param string $members <p>Comma separated list of servers to be added to the ensemble. Each has a configuration line for a server to be added (as would appear in a configuration file), only for maj. quorums.</p>
		 * @param int $version <p>The expected version of the node. The function will fail if the actual version of the node does not match the expected version. If -1 is used the version check will not take place.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @return void
		 * @link https://php.net/manual/ja/zookeeperconfig.add.php
		 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
		 */
		public function add(string $members, int $version = -1, array &$stat = NULL): void {}

		/**
		 * Gets the last committed configuration of the ZooKeeper cluster as it is known to the server to which the client is connected, synchronously
		 * @param callable $watcher_cb <p>If nonzero, a watch will be set at the server to notify the client if the node changes.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @return string <p>Returns the configuration string on success, and false on failure.</p>
		 * @link https://php.net/manual/ja/zookeeperconfig.get.php
		 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
		 */
		public function get(callable $watcher_cb = NULL, array &$stat = NULL): string {}

		/**
		 * Remove servers from the ensemble
		 * @param string $id_list <p>Comma separated list of server IDs to be removed from the ensemble. Each has an id of a server to be removed, only for maj. quorums.</p>
		 * @param int $version <p>The expected version of the node. The function will fail if the actual version of the node does not match the expected version. If -1 is used the version check will not take place.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @return void
		 * @link https://php.net/manual/ja/zookeeperconfig.remove.php
		 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
		 */
		public function remove(string $id_list, int $version = -1, array &$stat = NULL): void {}

		/**
		 * Change ZK cluster ensemble membership and roles of ensemble peers
		 * @param string $members <p>Comma separated list of new membership (e.g., contents of a membership configuration file) - for use only with a non-incremental reconfiguration.</p>
		 * @param int $version <p>The expected version of the node. The function will fail if the actual version of the node does not match the expected version. If -1 is used the version check will not take place.</p>
		 * @param array $stat <p>If not NULL, will hold the value of stat for the path on return.</p>
		 * @return void
		 * @link https://php.net/manual/ja/zookeeperconfig.set.php
		 * @since PECL zookeeper >= 0.6.0, ZooKeeper >= 3.5.0
		 */
		public function set(string $members, int $version = -1, array &$stat = NULL): void {}
	}

	/**
	 * <p>The ZooKeeper connection exception handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeeperconnectionexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperConnectionException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper exception handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeeperexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperException extends \Exception {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper exception (while marshalling or unmarshalling data) handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeepermarshallingexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperMarshallingException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper exception (when node does not exist) handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeepernonodeexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperNoNodeException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper operation timeout exception handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeeperoperationtimeoutexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperOperationTimeoutException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * <p>The ZooKeeper session exception handling class.</p>
	 * @link https://php.net/manual/ja/class.zookeepersessionexception.php
	 * @since PECL zookeeper >= 0.3.0
	 */
	class ZookeeperSessionException extends \ZookeeperException {

		/**
		 * @var string <p>例外メッセージ</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.message
		 */
		protected $message;

		/**
		 * @var int <p>例外コード</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.code
		 */
		protected $code;

		/**
		 * @var string <p>例外が作られたファイル名</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.file
		 */
		protected $file;

		/**
		 * @var int <p>例外が作られた行</p>
		 * @link https://php.net/manual/ja/class.exception.php#exception.props.line
		 */
		protected $line;

		/**
		 * 例外をコピーする
		 * <p>例外のコピーを作成しようとします。結果としてこれは Fatal エラーとなります。</p>
		 * @return void <p>値を返しません。</p>
		 * @link https://php.net/manual/ja/exception.clone.php
		 * @since PHP 5, PHP 7
		 */
		final private function __clone() {}

		/**
		 * 例外の文字列表現
		 * <p>例外を文字列で表現したものを返します。</p>
		 * @return string <p>例外を文字列で表現したものを返します。</p>
		 * @link https://php.net/manual/ja/exception.tostring.php
		 * @since PHP 5, PHP 7
		 */
		public function __toString(): string {}

		/**
		 * 例外コードを取得する
		 * <p>例外コードを返します。</p>
		 * @return mixed <p>例外コードを整数値で返します。しかし、 Exception クラスを継承したクラスでは、違う型を返すこともあります (たとえば PDOException は文字列を返します)。</p>
		 * @link https://php.net/manual/ja/exception.getcode.php
		 * @since PHP 5, PHP 7
		 */
		final public function getCode() {}

		/**
		 * 例外が作られたファイルを取得する
		 * <p>例外が作られたファイルの名前を取得します。</p>
		 * @return string <p>例外が作られたファイルの名前を返します。</p>
		 * @link https://php.net/manual/ja/exception.getfile.php
		 * @since PHP 5, PHP 7
		 */
		final public function getFile(): string {}

		/**
		 * 例外が作られた行を取得する
		 * <p>例外が作られた行番号を取得します。</p>
		 * @return int <p>例外が作られた行番号を返します。</p>
		 * @link https://php.net/manual/ja/exception.getline.php
		 * @since PHP 5, PHP 7
		 */
		final public function getLine(): int {}

		/**
		 * 例外メッセージを取得する
		 * <p>例外メッセージを返します。</p>
		 * @return string <p>例外メッセージ文字列を返します。</p>
		 * @link https://php.net/manual/ja/exception.getmessage.php
		 * @since PHP 5, PHP 7
		 */
		final public function getMessage(): string {}

		/**
		 * 前の例外を返す
		 * <p>前に発生した例外 (<code>Exception::__construct()</code> の 3 番目の引数) を返します。</p>
		 * @return Exception <p>前に発生した Throwable、あるいはそれが存在しない場合は <b><code>NULL</code></b> を返します。</p>
		 * @link https://php.net/manual/ja/exception.getprevious.php
		 * @since PHP 5 >= 5.3.0, PHP 7
		 */
		final public function getPrevious(): \Exception {}

		/**
		 * スタックトレースを取得する
		 * <p>例外のスタックトレースを返します。</p>
		 * @return array <p>例外のスタックトレースを配列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettrace.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTrace(): array {}

		/**
		 * スタックトレースを文字列で取得する
		 * <p>例外のスタックトレースを文字列で返します。</p>
		 * @return string <p>例外のスタックトレースを文字列で返します。</p>
		 * @link https://php.net/manual/ja/exception.gettraceasstring.php
		 * @since PHP 5, PHP 7
		 */
		final public function getTraceAsString(): string {}
	}

	/**
	 * Calls callbacks for pending operations
	 * <p>The <b>zookeeper_dispatch()</b> function calls the callbacks passwd by operations like <code>Zookeeper::get()</code> or <code>Zookeeper::exists()</code>.</p><p>Since version 0.4.0, this function must be called manually to achieve asynchronous operations. If you want that to be done automatically, you also can declare ticks at the beginning of your program.</p><p>After PHP 7.1, you can ignore this function. This extension uses EG(vm_interrupt) to implement async dispatch.</p>
	 * @return void
	 * @link https://php.net/manual/ja/function.zookeeper-dispatch.php
	 * @since PECL zookeeper >= 0.4.0
	 */
	function zookeeper_dispatch(): void {}

}
